1 - É uma estruta de dados que serve para guardar informações relativas ao seu contexto e os demais dados necessários à sua gerência de uma determinada tarefa. Também é útil para interromper uma tarefa e retorná-la posteriormente sem danificar o seu estado interno, ou seja trocar o contexto.


2 - Time sharing é um conceito em que cada atividade que está usando o processaor recebe um limite de tempo de processamento. Esse conceito é muito importante pois impede que uma determinada atividade domine por inteiro o processador ao entrar em um loop.

3 - Os critérios mais conhecidos são: Tempo de execução ou de vida; Tempo de espera;
Tempo de resposta; Eficiência;

5 - 
E -> P: Possível, ocorre no fim do quantum
E -> S: Possível, ocorre caso a tarefa em execução solicite acesso à um recurso não disponível no momento.
S -> E: Não é possível.
P -> N: Não é possível.
S -> T: Não é possível.
E -> T: Possível, ocorre quando a tarefa encerra sua execução ou é abortada em virtude de algum erro.
N -> S: Não é possível.
P -> S: Não é possível.

6 - 

[N] - [P] - [E] - [T] - [P] - [E] - [S] - [E] - [E] - [S] 

9 - Uma thread é cada fluxo de execução do sistema. E servem para se executar mais de uma atividade ao simultaneamente.

10 - É muito utilizado por ser leve e de fácil implementação. Como o núcleo somente considera uma thread, a carga de gerência imposta ao núcleo é pequena e não depende do número de threads dentro da aplicação. Mas, como essas operações são intermediadas pelo núcleo, se um thread de usuário solicitar uma operação de E/S (recepção de um pacote de rede, por exemplo) o thread de núcleo correspondente será suspenso até a conclusão da operação, fazendo com que todos os threads de usuário associados ao  processo parem de executar enquanto a operação não for concluída. Outro problema desse modelo diz respeito à divisão de recursos entre as tarefas. O núcleo do sistema divide o tempo do processador entre os fluxos de execução que ele conhece e gerencia: as threads de núcleo. Assim, uma aplicação com 100 threads de usuário irá receber o mesmo tempo de processador que outra aplicação com apenas um thread (considerando que ambas as aplicações têm a mesma prioridade). Cada thread da primeira aplicação irá portanto receber 1/100 do tempo que recebe o thread único da segunda aplicação, o que não pode ser considerado uma divisão justa desse recurso.

12 - [A] - [B] - [B] - [A] - [C] - [B] - [A] - [C] - [C]
